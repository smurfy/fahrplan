# checksum 0x9840 version 0x4000b
# This file was generated by an application wizard of Qt Creator.
# The code below handles deployment to Symbian and Maemo, aswell as copying
# of the application data to shadow build directories on desktop.
# It is recommended not to modify this file, since newer versions of Qt Creator
# may offer an updated version of it.

defineTest(qtcAddDeployment) {
for(deploymentfolder, DEPLOYMENTFOLDERS) {
    item = item$${deploymentfolder}
    itemsources = $${item}.sources
    $$itemsources = $$eval($${deploymentfolder}.source)
    itempath = $${item}.path
    $$itempath= $$eval($${deploymentfolder}.target)
    export($$itemsources)
    export($$itempath)
    DEPLOYMENT += $$item
}

MAINPROFILEPWD = $$PWD

symbian {
    # defined in the pro file
} else:win32 {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, /, \\)
        sourcePathSegments = $$split(source, \\)
        target = $$OUT_PWD/$$eval($${deploymentfolder}.target)/$$last(sourcePathSegments)
        target = $$replace(target, /, \\)
        !isEqual(source,$$target) {
            !isEmpty(copyCommand):copyCommand += &&
            isEqual(QMAKE_DIR_SEP, \\) {
                copyCommand += $(COPY_DIR) \"$$source\" \"$$target\"
            } else {
                source = $$replace(source, \\\\, /)
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
                target = $$replace(target, \\\\, /)
                copyCommand += test -d \"$$target\" || mkdir -p \"$$target\" && cp -r \"$$source\" \"$$target\"
            }
        }
    }
    !isEmpty(copyCommand) {
        copyCommand = @echo Copying application data... && $$copyCommand
        copydeploymentfolders.commands = $$copyCommand
        first.depends = $(first) copydeploymentfolders
        export(first.depends)
        export(copydeploymentfolders.commands)
        QMAKE_EXTRA_TARGETS += first copydeploymentfolders
    }
} else:unix {
    maemo5 {
        desktopfile.path = /usr/share/applications/hildon
    } else {
        desktopfile.path = /usr/share/applications
        copyCommand =
        for(deploymentfolder, DEPLOYMENTFOLDERS) {
            source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
            source = $$replace(source, \\\\, /)
            macx {
                target = $$OUT_PWD/$${TARGET}.app/Contents/Resources/$$eval($${deploymentfolder}.target)
            } else {
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
            }
            target = $$replace(target, \\\\, /)
            sourcePathSegments = $$split(source, /)
            targetFullPath = $$target/$$last(sourcePathSegments)
            !isEqual(source,$$targetFullPath) {
                !isEmpty(copyCommand):copyCommand += &&
                copyCommand += $(MKDIR) \"$$target\"
                copyCommand += && $(COPY_DIR) \"$$source\" \"$$target\"
            }
        }
        !isEmpty(copyCommand) {
            copyCommand = @echo Copying application data... && $$copyCommand
            copydeploymentfolders.commands = $$copyCommand
            first.depends = $(first) copydeploymentfolders
            export(first.depends)
            export(copydeploymentfolders.commands)
            QMAKE_EXTRA_TARGETS += first copydeploymentfolders
        }
    }

    installPrefix = /usr

    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = $${installPrefix}/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }
    maemo5 {
        desktopfile.files = data/$${TARGET}_fremantle.desktop
        desktopfile.path = /usr/share/applications/hildon
        icon.files = data/$${TARGET}_64.png
        icon.path = /usr/share/icons
    } else:contains(MEEGO_EDITION,harmattan) {
        installPrefix = /opt/$${TARGET}
        desktopfile.files = data/$${TARGET}_harmattan.desktop
        desktopfile.path = /usr/share/applications
        icon.files = data/$${TARGET}_80.png
        icon.path = /usr/share/icons/hicolor/80x80/apps
        splash.files = data/splash.jpg
        splash.path = $${installPrefix}/data
        export(splash.files)
        export(splash.path)
        INSTALLS += splash
    } else:ubuntu {
        installPrefix = /
        desktopfile.files = data/$${TARGET}_ubuntu.desktop
        desktopfile.path = /
        icon.files = data/$${TARGET}-square.svg
        icon.path = /
        MANIFEST = $$cat(qtc_packaging/ubuntu/manifest.json.in,blob)
        MANIFEST = $$replace(MANIFEST,@VERSION@,$${VERSION})
        MANIFEST = $$replace(MANIFEST,@APP_ID@,$${APP_ID})
        MANIFEST = $$replace(MANIFEST,@APP_NAME@,$${APP_NAME})
        MANIFEST = $$replace(MANIFEST,@MAINTAINER_UBUNTU@,$${MAINTAINER_UBUNTU})
        # The following line is required for the Ubuntu SDK to generate a run config
        UBUNTU_MANIFEST_FILE = $${OBJECTS_DIR}/manifest.json
        write_file($${UBUNTU_MANIFEST_FILE},MANIFEST)
        export(UBUNTU_MANIFEST_FILE)
        manifestfile.files = $${UBUNTU_MANIFEST_FILE}
        manifestfile.CONFIG += no_check_exist
        manifestfile.path = /
        export(manifestfile.files)
        export(manifestfile.path)
        apparmor.files = qtc_packaging/ubuntu/fahrplan2.json
        apparmor.path = /
        export(apparmor.files)
        export(apparmor.path)
        INSTALLS += manifestfile apparmor
    } else:exists("/usr/include/sailfishapp/sailfishapp.h") {
        desktopfile.files = data/sailfishos/$${TARGET}.desktop
        # Use different desktop file for openrepos
        openrepos {
            desktopfile.files = data/sailfishos/openrepos/$${TARGET}.desktop
        }
        desktopfile.path = /usr/share/applications
        icon.files = data/sailfishos/$${TARGET}.png
        icon.path = /usr/share/icons/hicolor/86x86/apps
    }

    target.path = $${installPrefix}/bin
    export(icon.files)
    export(icon.path)
    export(desktopfile.files)
    export(desktopfile.path)
    export(target.path)
    INSTALLS += desktopfile icon target
}

export (ICON)
export (INSTALLS)
export (DEPLOYMENT)
export (TARGET.EPOCHEAPSIZE)
export (TARGET.CAPABILITY)
export (LIBS)
export (QMAKE_EXTRA_TARGETS)
}
